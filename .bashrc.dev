# -------------------------------------------------------------------
# Vulkan/GLES Dev Container (.bashrc.dev)
# Author: Linggawasistha Djohari (https://github.com/lwdjohari)
# -------------------------------------------------------------------

# Source global definitions
if [ -f /etc/bashrc ]; then
  . /etc/bashrc
fi

# Ensure user bin paths
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin" ]]; then
  PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

# Colors
RED=$'\033[0;31m'; GREEN=$'\033[0;32m'; YELLOW=$'\033[1;33m'
BLUE=$'\033[1;34m'; CYAN=$'\033[1;36m'; MAGENTA=$'\033[1;35m'
BOLD=$'\033[1m'; RESET=$'\033[0m'

# Aliases
alias ls='ls --color=auto'
alias ll='ls -alF'
alias la='ls -A'
alias grep='grep --color=auto'
export LESS='-R'

# Simple git branch in prompt
_git_branch() {
  local b
  b="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)" || return 0
  [ "$b" != "HEAD" ] && printf ' (%s)' "$b"
}

# Colorful prompt
PS1='\[\e[1;32m\]\u@\h\[\e[0m\]:\[\e[1;34m\]\w\[\e[0m\]$(_git_branch) \$ '

# Version helpers ---------------------------------------------------
_ver() {
  if command -v "$1" >/dev/null 2>&1; then
    printf "%-12s %s\n" "${YELLOW}$1:${RESET}" "$("$1" --version 2>/dev/null | head -n1)"
  else
    printf "%-12s %s\n" "${YELLOW}$1:${RESET}" "${RED}MISSING${RESET}"
  fi
}

# --- SAFE version printers (avoid hangs) -------------------------------------
# Try a few common flags with a short timeout; print first line if any.
_ver_try() {
  # usage: _ver_try <cmd> [flag]
  local cmd="$1" flag="${2:-}"
  # shellcheck disable=SC2086
  timeout 1s bash -lc "$cmd ${flag} 2>&1 | head -n1"
}

_ver_safe() {
  # usage: _ver_safe <cmd> [known-flag]
  local cmd="$1" known="$2" out=""
  if ! command -v "$cmd" >/dev/null 2>&1; then
    printf "%-12s %s\n" "${YELLOW}${cmd}:${RESET}" "${RED}MISSING${RESET}"
    return
  fi

  # explicit known flag first (e.g., ssh -V, nc -h)
  if [ -n "$known" ]; then
    out="$(_ver_try "$cmd" "$known")"
  fi
  # generic fallbacks
  if [ -z "$out" ]; then out="$(_ver_try "$cmd" "--version")"; fi
  if [ -z "$out" ]; then out="$(_ver_try "$cmd" "-V")"; fi
  if [ -z "$out" ]; then out="$(_ver_try "$cmd" "-v")"; fi
  if [ -z "$out" ]; then out="$(_ver_try "$cmd" "-h")"; fi

  if [ -n "$out" ]; then
    printf "%-12s %s\n" "${YELLOW}${cmd}:${RESET}" "$out"
  else
    # as a last resort, just say it's present to avoid blocking
    printf "%-12s %s\n" "${YELLOW}${cmd}:${RESET}" "available"
  fi
}

_ver_present() {
  if command -v "$1" >/dev/null 2>&1; then
    printf "%-12s %s\n" "${YELLOW}$1:${RESET}" "available"
  else
    printf "%-12s %s\n" "${YELLOW}$1:${RESET}" "${RED}MISSING${RESET}"
  fi
}


# Banner -------------------------------------------------------------
devinfo() {
  local now="$(date '+%Y-%m-%d %H:%M:%S')"
  local host="$(hostname)"
  local user="$(id -un)"
  local uid="$(id -u)"
  local gid="$(id -g)"
  local sh="${SHELL##*/}"

  echo -e "\n${CYAN}----------------------------------------------------------------------------------------------------${RESET}"
  echo -e " ${BOLD}Vulkan/GLES C++ Dev Container â€” LunarG SDK default (target runtime: Vulkan 1.1)${RESET}  ${DIM}${now}${RESET}"
  echo -e "${CYAN}----------------------------------------------------------------------------------------------------${RESET}"
  echo -e " ${YELLOW}User:${RESET} ${BOLD}${user}${RESET} (uid=${uid} gid=${gid})   ${YELLOW}Host:${RESET} ${BOLD}${host}${RESET}   ${YELLOW}Shell:${RESET} ${sh}"
  echo -e " ${YELLOW}Workspace:${RESET} /workspace   ${YELLOW}Home:${RESET} ${HOME}\n"

  echo -e " ${YELLOW}VULKAN_SDK:${RESET} ${VULKAN_SDK:-<unset>}"
  echo -e " ${YELLOW}ANDROID_SDK_ROOT:${RESET} ${ANDROID_SDK_ROOT:-<unset>}"
  echo -e " ${YELLOW}ANDROID_NDK_HOME:${RESET} ${ANDROID_NDK_HOME:-<unset>}"
  echo -e " ${YELLOW}DISPLAY:${RESET} ${DISPLAY:-<unset>}   ${YELLOW}WAYLAND_DISPLAY:${RESET} ${WAYLAND_DISPLAY:-<unset>}\n"

  echo -e "${CYAN}${BOLD}======================== DEV CONTAINER INVENTORY ========================${RESET}"

  echo -e "${BOLD}Environment & Paths:${RESET}"
  printf "  %-14s %s\n" "VULKAN_SDK:" "${VULKAN_SDK:-<unset>}"
  printf "  %-14s %s\n" "ANDROID_SDK_ROOT:" "${ANDROID_SDK_ROOT:-<unset>}"
  printf "  %-14s %s\n" "ANDROID_NDK_HOME:" "${ANDROID_NDK_HOME:-<unset>}"
  printf "  %-14s %s\n" "CCACHE_DIR:" "${CCACHE_DIR:-<unset>}"
  printf "  %-14s %s\n" "DISPLAY:" "${DISPLAY:-<unset>}"
  printf "  %-14s %s\n" "WAYLAND_DISPLAY:" "${WAYLAND_DISPLAY:-<unset>}"
  printf "  %-14s %s\n" "/dev/dri:" "$([ -d /dev/dri ] && echo present || echo absent)"
  echo ""

  echo -e "${BOLD}Compilers & Build:${RESET}"
  _ver clang
  _ver clang++
  _ver lld
  _ver lldb
  _ver gcc
  _ver g++
  _ver cmake
  _ver ninja
  _ver make
  _ver pkg-config
  _ver ccache
  _ver ld
  _ver ar
  _ver ranlib
  _ver java
  _ver javac
  echo ""

  echo -e "${BOLD}Debuggers & Profilers:${RESET}"
  _ver gdb
  _ver lldb
  _ver valgrind
  _ver strace
  _ver ltrace
  _ver pahole
  _ver addr2line
  _ver llvm-symbolizer
  echo ""

  echo -e "${BOLD}Graphics / GPU / Shaders:${RESET}"
  _ver_present vulkaninfo
  _ver_present glslangValidator
  _ver_present glslc
  _ver_present spirv-as
  _ver_present spirv-val
  _ver_present spirv-opt
  _ver_present spirv-cross
  _ver_present gfxrecon-info
  _ver_present gfxrecon-replay
  _ver_present glxinfo
  _ver_present es2_info
  echo ""

  echo -e "${BOLD}Android Toolchain:${RESET}"
  _ver_present sdkmanager
  _ver_present adb
  _ver_present aapt
  _ver_present aapt2
  _ver_present ndk-build
  echo ""

  echo -e "${BOLD}DB / Networking / Compression:${RESET}"
  _ver_safe psql
  _ver_safe sqlite3
  _ver_safe openssl
  _ver_safe curl
  _ver_safe wget
  _ver_safe rsync
  _ver_safe ssh "-V"         # OpenSSH prints version only with -V (stderr); safe
  _ver_safe netcat "-h"      # many nc/netcat have no --version, -h is safe
  _ver_safe traceroute "--version"
  _ver_safe tar "--version"
  _ver_safe bzip2 "--version"
  _ver_safe brotli "--version"
  _ver_safe gzip "--version"
  echo ""

  #echo -e "${BOLD}Misc Utilities:${RESET}"
  #_ver_safe htop "--version"
  #_ver_safe tree "--version"
  #echo ""
}

# Automatically show banner on first interactive shell
if [ -t 1 ]; then
  devinfo
fi
